concurrency_src = [
    'AbstractExecutorService.d',
    'AbstractOwnableSynchronizer.d',
    'AbstractQueuedSynchronizer.d',
    'atomic/AtomicBiInteger.d',
    'atomic/AtomicHelper.d',
    'atomic/package.d',
    'BlockingQueue.d',
    'CompletableFuture.d',
    'CompletionStage.d',
    'ConcurrentHashMap.d',
    'ConcurrentMap.d',
    'CountedCompleter.d',
    'CountingCallback.d',
    'Delayed.d',
    'Exceptions.d',
    'Executors.d',
    'ExecutorService.d',
    'ForkJoinPool.d',
    'ForkJoinTask.d',
    'ForkJoinTaskHelper.d',
    'ForkJoinWorkerThread.d',
    'Future.d',
    'FuturePromise.d',
    'FutureTask.d',
    'Helpers.d',
    'IdleTimeout.d',
    'IteratingCallback.d',
    'LinkedBlockingQueue.d',
    'Locker.d',
    'package.d',
    'Promise.d',
    'ScheduledExecutorService.d',
    'ScheduledThreadPoolExecutor.d',
    'Scheduler.d',
    'SimpleQueue.d',
    'TaskPool.d',
    'ThreadFactory.d',
    'thread/Helper.d',
    'ThreadLocalRandom.d',
    'thread/LockSupport.d',
    'thread/package.d',
    'ThreadPoolExecutor.d',
    'thread/ThreadEx.d',
]

concurrency_lib = library('hunt-concurrency',
    concurrency_src,
    install: true,
    version: meson.project_version(),
    soversion: project_soversion,
    dependencies: [common_dep],
    d_module_versions: d_mod_version,
)

pkgc.generate(concurrency_lib,
              name: 'hunt-concurrency',
              subdirs: 'd/hunt-concurrency',
              version: meson.project_version(),
              description: 'Hunt concurrency library.',
              d_module_versions: d_mod_version,
)
